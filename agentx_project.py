# -*- coding: utf-8 -*-
"""Agentx_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vH4UJELLkPzuKvaLOD2Cy7kNYTfTJZ9_
"""

!pip install langchain groq langchain-groq

from langchain_groq import ChatGroq
from langchain.prompts import ChatPromptTemplate


groq_api_key = "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"


llm = ChatGroq(
    api_key=groq_api_key,
    model_name="llama3-8b-8192"
)


prompt_template = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful assistant for a restaurant named SteamNoodles."),
    ("user", "Here is a customer review:\n\n\"{review}\"\n\n1. Identify the sentiment (positive/negative/neutral).\n2. Generate a short, polite response from the restaurant based on the sentiment and content.")
])

def generate_feedback_response(review: str):
    prompt = prompt_template.format_messages(review=review)
    response = llm(prompt)
    return response.content


sample_review = input("Enter customer review: ")
reply = generate_feedback_response(sample_review)
print("\nGenerated Response:\n", reply)

!pip install pandas matplotlib seaborn

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load uploaded file
filename = list(uploaded.keys())[0]
df = pd.read_csv(filename, parse_dates=["Review Date"])

# Rename or preview columns
print(df.columns)
df.head()

def rating_to_sentiment(r):
    if r >= 4:
        return "positive"
    elif r == 3:
        return "neutral"
    else:
        return "negative"

df["sentiment"] = df["Rating"].apply(rating_to_sentiment)

df = df.dropna(subset=["Review Date", "Rating"])

import matplotlib.pyplot as plt
import seaborn as sns

def plot_sentiment_trends(start_date: str, end_date: str):

    mask = (df['Review Date'] >= start_date) & (df['Review Date'] <= end_date)
    filtered = df.loc[mask].copy()

    filtered['date'] = filtered['Review Date'].dt.date

    sentiment_counts = filtered.groupby(['date', 'sentiment']).size().unstack(fill_value=0)

    plt.figure(figsize=(12,6))
    sns.lineplot(data=sentiment_counts)
    plt.title(f"Sentiment Trends from {start_date} to {end_date}")
    plt.xlabel("Date")
    plt.ylabel("Number of Reviews")
    plt.legend(title="Sentiment")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

plot_sentiment_trends("2023-07-24", "2023-08-31")